{
  "address": "0xDe033ad4D5385e6cc85BD4Ef810C4e3f632cA131",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_wl",
          "type": "address[]"
        }
      ],
      "name": "addWlAdresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkPublicMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkWlMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintWl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openPublicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openWLMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_set",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_c",
          "type": "uint256"
        }
      ],
      "name": "setMaxPerWLAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40ea07f2c9dc6247256817eea89882461659f149dabb0802506eec247238ff4b",
  "receipt": {
    "to": null,
    "from": "0x74D99d3c146E5F412F955462C8cbefC623DCD12c",
    "contractAddress": "0xDe033ad4D5385e6cc85BD4Ef810C4e3f632cA131",
    "transactionIndex": 14,
    "gasUsed": "2911162",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd3c2f6ec2c17d83d8f0a4875913d5cc3be7354e107ddc16819d5acd4f02d5caf",
    "transactionHash": "0x40ea07f2c9dc6247256817eea89882461659f149dabb0802506eec247238ff4b",
    "logs": [],
    "blockNumber": 11017842,
    "cumulativeGasUsed": "13195785",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Eternal",
    "EG"
  ],
  "numDeployments": 7,
  "solcInputHash": "ce9373315a83d03649e9989d68e00865",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wl\",\"type\":\"address[]\"}],\"name\":\"addWlAdresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPublicMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWlMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintWl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openWLMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_set\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"setMaxPerWLAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Artwork.sol\":\"Artwork\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Artwork.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract Artwork is ERC721 {\\n    using Strings for uint256;\\n    uint256 public tokenCounter = 1;\\n    bool mintWlOpen = false;\\n    bool mintPublicOpen = false;\\n    address owner;\\n    string baseURI;\\n    uint256 maxPerWlAddress;\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(address => bool) inWlAddresses;\\n    mapping(address => uint256) inWlAddressesMinted;\\n    mapping(address => uint256) AddressesMinted;\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\\n        tokenCounter = 1;\\n        owner = msg.sender;\\n    }\\n\\n    function addWlAdresses(address[] memory _wl) public onlyOwner {\\n        address a;\\n        for (uint256 i; i < _wl.length; i++) {\\n            a = _wl[i];\\n            inWlAddresses[a] = true;\\n        }\\n    }\\n\\n    function setMaxPerWLAddress(uint256 _c) public onlyOwner {\\n        maxPerWlAddress = _c;\\n    }\\n\\n    function checkWlMint() public view returns (bool) {\\n        return mintWlOpen;\\n    }\\n\\n    function checkPublicMint() public view returns (bool) {\\n        return mintPublicOpen;\\n    }\\n\\n    function openWLMint() public onlyOwner {\\n        mintWlOpen = true;\\n    }\\n\\n    function openPublicMint() public onlyOwner {\\n        mintPublicOpen = true;\\n    }\\n\\n    function mintPublic(uint256 _amount) public {\\n        require(mintPublicOpen == true, \\\"Public mint did not open\\\");\\n        require(\\n            AddressesMinted[msg.sender] + _amount <= maxPerWlAddress,\\n            \\\"You have minted max per you address\\\"\\n        );\\n        for (uint256 i; i < _amount; i++) {\\n            _safeMint(msg.sender, tokenCounter);\\n            tokenCounter++;\\n            AddressesMinted[msg.sender] += 1;\\n        }\\n    }\\n\\n    function mintWl(uint256 _amount) public {\\n        require(mintWlOpen == true, \\\"didnot open\\\");\\n        require(inWlAddresses[msg.sender] == true, \\\"You are not in wl list\\\");\\n        require(\\n            inWlAddressesMinted[msg.sender] + _amount <= maxPerWlAddress,\\n            \\\"You have minted max per you address\\\"\\n        );\\n\\n        for (uint256 i; i < _amount; i++) {\\n            _safeMint(msg.sender, tokenCounter);\\n            tokenCounter++;\\n            inWlAddressesMinted[msg.sender] += 1;\\n        }\\n    }\\n\\n    function setBaseURI(string memory _set) public onlyOwner {\\n        baseURI = _set;\\n    }\\n\\n    function baseurl() internal view virtual returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n        string memory url = baseurl();\\n        string memory f = \\\".json\\\";\\n        return\\n            bytes(url).length > 0\\n                ? string(abi.encodePacked(url, tokenId.toString(), f))\\n                : \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x65db95a22e5d44217c934acce5e81a6b67a58c929aa7ab59e9d54a64a89361bc\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405260016006556000600760006101000a81548160ff0219169083151502179055506000600760016101000a81548160ff0219169083151502179055503480156200004c57600080fd5b506040516200363e3803806200363e833981810160405281019062000072919062000227565b818181600090805190602001906200008c929190620000f9565b508060019080519060200190620000a5929190620000f9565b505050600160068190555033600760026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000430565b828054620001079062000341565b90600052602060002090601f0160209004810192826200012b576000855562000177565b82601f106200014657805160ff191683800117855562000177565b8280016001018555821562000177579182015b828111156200017657825182559160200191906001019062000159565b5b5090506200018691906200018a565b5090565b5b80821115620001a55760008160009055506001016200018b565b5090565b6000620001c0620001ba84620002d5565b620002ac565b905082815260208101848484011115620001df57620001de62000410565b5b620001ec8482856200030b565b509392505050565b600082601f8301126200020c576200020b6200040b565b5b81516200021e848260208601620001a9565b91505092915050565b600080604083850312156200024157620002406200041a565b5b600083015167ffffffffffffffff81111562000262576200026162000415565b5b6200027085828601620001f4565b925050602083015167ffffffffffffffff81111562000294576200029362000415565b5b620002a285828601620001f4565b9150509250929050565b6000620002b8620002cb565b9050620002c6828262000377565b919050565b6000604051905090565b600067ffffffffffffffff821115620002f357620002f2620003dc565b5b620002fe826200041f565b9050602081019050919050565b60005b838110156200032b5780820151818401526020810190506200030e565b838111156200033b576000848401525b50505050565b600060028204905060018216806200035a57607f821691505b60208210811415620003715762000370620003ad565b5b50919050565b62000382826200041f565b810181811067ffffffffffffffff82111715620003a457620003a3620003dc565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6131fe80620004406000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ef3f632116100c3578063c1fc2d271161007c578063c1fc2d2714610360578063c87b56dd1461037c578063d082e381146103ac578063e985e9c5146103ca578063ed57d4ab146103fa578063efd0cbf9146104185761014d565b80636ef3f632146102b457806370a08231146102be57806395d89b41146102ee578063a22cb4651461030c578063b88d4fde14610328578063bf092a07146103445761014d565b806323b872dd1161011557806323b872dd1461020a57806342842e0e1461022657806345f7e06e14610242578063558a67891461024c57806355f804b3146102685780636352211e146102845761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d05780631fa93aa7146101ec575b600080fd5b61016c600480360381019061016791906122ff565b610434565b6040516101799190612744565b60405180910390f35b61018a610516565b604051610197919061275f565b60405180910390f35b6101ba60048036038101906101b591906123a2565b6105a8565b6040516101c791906126dd565b60405180910390f35b6101ea60048036038101906101e59190612276565b6105ee565b005b6101f4610706565b6040516102019190612744565b60405180910390f35b610224600480360381019061021f9190612160565b61071d565b005b610240600480360381019061023b9190612160565b61077d565b005b61024a61079d565b005b610266600480360381019061026191906122b6565b610814565b005b610282600480360381019061027d9190612359565b610908565b005b61029e600480360381019061029991906123a2565b61097c565b6040516102ab91906126dd565b60405180910390f35b6102bc610a2e565b005b6102d860048036038101906102d391906120f3565b610aa5565b6040516102e59190612961565b60405180910390f35b6102f6610b5d565b604051610303919061275f565b60405180910390f35b61032660048036038101906103219190612236565b610bef565b005b610342600480360381019061033d91906121b3565b610c05565b005b61035e600480360381019061035991906123a2565b610c67565b005b61037a600480360381019061037591906123a2565b610e7c565b005b610396600480360381019061039191906123a2565b610ee0565b6040516103a3919061275f565b60405180910390f35b6103b4610f85565b6040516103c19190612961565b60405180910390f35b6103e460048036038101906103df9190612120565b610f8b565b6040516103f19190612744565b60405180910390f35b61040261101f565b60405161040f9190612744565b60405180910390f35b610432600480360381019061042d91906123a2565b611036565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ff57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050f575061050e826111b8565b5b9050919050565b60606000805461052590612be3565b80601f016020809104026020016040519081016040528092919081815260200182805461055190612be3565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b60006105b382611222565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f98261097c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610661906128e1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661068961126d565b73ffffffffffffffffffffffffffffffffffffffff1614806106b857506106b7816106b261126d565b610f8b565b5b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90612881565b60405180910390fd5b6107018383611275565b505050565b6000600760019054906101000a900460ff16905090565b61072e61072861126d565b8261132e565b61076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490612941565b60405180910390fd5b6107788383836113c3565b505050565b61079883838360405180602001604052806000815250610c05565b505050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f757600080fd5b6001600760016101000a81548160ff021916908315150217905550565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086e57600080fd5b6000805b82518110156109035782818151811061088e5761088d612d4d565b5b602002602001015191506001600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806108fb90612c46565b915050610872565b505050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461096257600080fd5b8060089080519060200190610978929190611e69565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c906128c1565b60405180910390fd5b80915050919050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a8857600080fd5b6001600760006101000a81548160ff021916908315150217905550565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0d90612861565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610b6c90612be3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9890612be3565b8015610be55780601f10610bba57610100808354040283529160200191610be5565b820191906000526020600020905b815481529060010190602001808311610bc857829003601f168201915b5050505050905090565b610c01610bfa61126d565b838361162a565b5050565b610c16610c1061126d565b8361132e565b610c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4c90612941565b60405180910390fd5b610c6184848484611797565b50505050565b60011515600760009054906101000a900460ff16151514610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb490612901565b60405180910390fd5b60011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4790612921565b60405180910390fd5b60095481600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d9e9190612a72565b1115610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd690612781565b60405180910390fd5b60005b81811015610e7857610df6336006546117f3565b60066000815480929190610e0990612c46565b91905055506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e5e9190612a72565b925050819055508080610e7090612c46565b915050610de2565b5050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed657600080fd5b8060098190555050565b6060610eeb82611222565b6000610ef5611811565b905060006040518060400160405280600581526020017f2e6a736f6e00000000000000000000000000000000000000000000000000000081525090506000825111610f4f5760405180602001604052806000815250610f7c565b81610f59856118a3565b82604051602001610f6c939291906126ac565b6040516020818303038152906040525b92505050919050565b60065481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600760009054906101000a900460ff16905090565b60011515600760019054906101000a900460ff1615151461108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390612841565b60405180910390fd5b60095481600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110da9190612a72565b111561111b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111290612781565b60405180910390fd5b60005b818110156111b457611132336006546117f3565b6006600081548092919061114590612c46565b91905055506001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461119a9190612a72565b9250508190555080806111ac90612c46565b91505061111e565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61122b81611a04565b61126a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611261906128c1565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166112e88361097c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061133a8361097c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061137c575061137b8185610f8b565b5b806113ba57508373ffffffffffffffffffffffffffffffffffffffff166113a2846105a8565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113e38261097c565b73ffffffffffffffffffffffffffffffffffffffff1614611439576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611430906127c1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a090612801565b60405180910390fd5b6114b4838383611a70565b6114bf600082611275565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461150f9190612af9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115669190612a72565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611625838383611a75565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169090612821565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161178a9190612744565b60405180910390a3505050565b6117a28484846113c3565b6117ae84848484611a7a565b6117ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e4906127a1565b60405180910390fd5b50505050565b61180d828260405180602001604052806000815250611c11565b5050565b60606008805461182090612be3565b80601f016020809104026020016040519081016040528092919081815260200182805461184c90612be3565b80156118995780601f1061186e57610100808354040283529160200191611899565b820191906000526020600020905b81548152906001019060200180831161187c57829003601f168201915b5050505050905090565b606060008214156118eb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119ff565b600082905060005b6000821461191d57808061190690612c46565b915050600a826119169190612ac8565b91506118f3565b60008167ffffffffffffffff81111561193957611938612d7c565b5b6040519080825280601f01601f19166020018201604052801561196b5781602001600182028036833780820191505090505b5090505b600085146119f8576001826119849190612af9565b9150600a856119939190612c8f565b603061199f9190612a72565b60f81b8183815181106119b5576119b4612d4d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119f19190612ac8565b945061196f565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000611a9b8473ffffffffffffffffffffffffffffffffffffffff16611c6c565b15611c04578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611ac461126d565b8786866040518563ffffffff1660e01b8152600401611ae694939291906126f8565b602060405180830381600087803b158015611b0057600080fd5b505af1925050508015611b3157506040513d601f19601f82011682018060405250810190611b2e919061232c565b60015b611bb4573d8060008114611b61576040519150601f19603f3d011682016040523d82523d6000602084013e611b66565b606091505b50600081511415611bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba3906127a1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c09565b600190505b949350505050565b611c1b8383611c8f565b611c286000848484611a7a565b611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e906127a1565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf6906128a1565b60405180910390fd5b611d0881611a04565b15611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f906127e1565b60405180910390fd5b611d5460008383611a70565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611da49190612a72565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e6560008383611a75565b5050565b828054611e7590612be3565b90600052602060002090601f016020900481019282611e975760008555611ede565b82601f10611eb057805160ff1916838001178555611ede565b82800160010185558215611ede579182015b82811115611edd578251825591602001919060010190611ec2565b5b509050611eeb9190611eef565b5090565b5b80821115611f08576000816000905550600101611ef0565b5090565b6000611f1f611f1a846129a1565b61297c565b90508083825260208201905082856020860282011115611f4257611f41612db0565b5b60005b85811015611f725781611f588882612000565b845260208401935060208301925050600181019050611f45565b5050509392505050565b6000611f8f611f8a846129cd565b61297c565b905082815260208101848484011115611fab57611faa612db5565b5b611fb6848285612ba1565b509392505050565b6000611fd1611fcc846129fe565b61297c565b905082815260208101848484011115611fed57611fec612db5565b5b611ff8848285612ba1565b509392505050565b60008135905061200f8161316c565b92915050565b600082601f83011261202a57612029612dab565b5b813561203a848260208601611f0c565b91505092915050565b60008135905061205281613183565b92915050565b6000813590506120678161319a565b92915050565b60008151905061207c8161319a565b92915050565b600082601f83011261209757612096612dab565b5b81356120a7848260208601611f7c565b91505092915050565b600082601f8301126120c5576120c4612dab565b5b81356120d5848260208601611fbe565b91505092915050565b6000813590506120ed816131b1565b92915050565b60006020828403121561210957612108612dbf565b5b600061211784828501612000565b91505092915050565b6000806040838503121561213757612136612dbf565b5b600061214585828601612000565b925050602061215685828601612000565b9150509250929050565b60008060006060848603121561217957612178612dbf565b5b600061218786828701612000565b935050602061219886828701612000565b92505060406121a9868287016120de565b9150509250925092565b600080600080608085870312156121cd576121cc612dbf565b5b60006121db87828801612000565b94505060206121ec87828801612000565b93505060406121fd878288016120de565b925050606085013567ffffffffffffffff81111561221e5761221d612dba565b5b61222a87828801612082565b91505092959194509250565b6000806040838503121561224d5761224c612dbf565b5b600061225b85828601612000565b925050602061226c85828601612043565b9150509250929050565b6000806040838503121561228d5761228c612dbf565b5b600061229b85828601612000565b92505060206122ac858286016120de565b9150509250929050565b6000602082840312156122cc576122cb612dbf565b5b600082013567ffffffffffffffff8111156122ea576122e9612dba565b5b6122f684828501612015565b91505092915050565b60006020828403121561231557612314612dbf565b5b600061232384828501612058565b91505092915050565b60006020828403121561234257612341612dbf565b5b60006123508482850161206d565b91505092915050565b60006020828403121561236f5761236e612dbf565b5b600082013567ffffffffffffffff81111561238d5761238c612dba565b5b612399848285016120b0565b91505092915050565b6000602082840312156123b8576123b7612dbf565b5b60006123c6848285016120de565b91505092915050565b6123d881612b2d565b82525050565b6123e781612b3f565b82525050565b60006123f882612a2f565b6124028185612a45565b9350612412818560208601612bb0565b61241b81612dc4565b840191505092915050565b600061243182612a3a565b61243b8185612a56565b935061244b818560208601612bb0565b61245481612dc4565b840191505092915050565b600061246a82612a3a565b6124748185612a67565b9350612484818560208601612bb0565b80840191505092915050565b600061249d602383612a56565b91506124a882612dd5565b604082019050919050565b60006124c0603283612a56565b91506124cb82612e24565b604082019050919050565b60006124e3602583612a56565b91506124ee82612e73565b604082019050919050565b6000612506601c83612a56565b915061251182612ec2565b602082019050919050565b6000612529602483612a56565b915061253482612eeb565b604082019050919050565b600061254c601983612a56565b915061255782612f3a565b602082019050919050565b600061256f601883612a56565b915061257a82612f63565b602082019050919050565b6000612592602983612a56565b915061259d82612f8c565b604082019050919050565b60006125b5603e83612a56565b91506125c082612fdb565b604082019050919050565b60006125d8602083612a56565b91506125e38261302a565b602082019050919050565b60006125fb601883612a56565b915061260682613053565b602082019050919050565b600061261e602183612a56565b91506126298261307c565b604082019050919050565b6000612641600b83612a56565b915061264c826130cb565b602082019050919050565b6000612664601683612a56565b915061266f826130f4565b602082019050919050565b6000612687602e83612a56565b91506126928261311d565b604082019050919050565b6126a681612b97565b82525050565b60006126b8828661245f565b91506126c4828561245f565b91506126d0828461245f565b9150819050949350505050565b60006020820190506126f260008301846123cf565b92915050565b600060808201905061270d60008301876123cf565b61271a60208301866123cf565b612727604083018561269d565b818103606083015261273981846123ed565b905095945050505050565b600060208201905061275960008301846123de565b92915050565b600060208201905081810360008301526127798184612426565b905092915050565b6000602082019050818103600083015261279a81612490565b9050919050565b600060208201905081810360008301526127ba816124b3565b9050919050565b600060208201905081810360008301526127da816124d6565b9050919050565b600060208201905081810360008301526127fa816124f9565b9050919050565b6000602082019050818103600083015261281a8161251c565b9050919050565b6000602082019050818103600083015261283a8161253f565b9050919050565b6000602082019050818103600083015261285a81612562565b9050919050565b6000602082019050818103600083015261287a81612585565b9050919050565b6000602082019050818103600083015261289a816125a8565b9050919050565b600060208201905081810360008301526128ba816125cb565b9050919050565b600060208201905081810360008301526128da816125ee565b9050919050565b600060208201905081810360008301526128fa81612611565b9050919050565b6000602082019050818103600083015261291a81612634565b9050919050565b6000602082019050818103600083015261293a81612657565b9050919050565b6000602082019050818103600083015261295a8161267a565b9050919050565b6000602082019050612976600083018461269d565b92915050565b6000612986612997565b90506129928282612c15565b919050565b6000604051905090565b600067ffffffffffffffff8211156129bc576129bb612d7c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156129e8576129e7612d7c565b5b6129f182612dc4565b9050602081019050919050565b600067ffffffffffffffff821115612a1957612a18612d7c565b5b612a2282612dc4565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612a7d82612b97565b9150612a8883612b97565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612abd57612abc612cc0565b5b828201905092915050565b6000612ad382612b97565b9150612ade83612b97565b925082612aee57612aed612cef565b5b828204905092915050565b6000612b0482612b97565b9150612b0f83612b97565b925082821015612b2257612b21612cc0565b5b828203905092915050565b6000612b3882612b77565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612bce578082015181840152602081019050612bb3565b83811115612bdd576000848401525b50505050565b60006002820490506001821680612bfb57607f821691505b60208210811415612c0f57612c0e612d1e565b5b50919050565b612c1e82612dc4565b810181811067ffffffffffffffff82111715612c3d57612c3c612d7c565b5b80604052505050565b6000612c5182612b97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c8457612c83612cc0565b5b600182019050919050565b6000612c9a82612b97565b9150612ca583612b97565b925082612cb557612cb4612cef565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f596f752068617665206d696e746564206d61782070657220796f75206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5075626c6963206d696e7420646964206e6f74206f70656e0000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f6469646e6f74206f70656e000000000000000000000000000000000000000000600082015250565b7f596f7520617265206e6f7420696e20776c206c69737400000000000000000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61317581612b2d565b811461318057600080fd5b50565b61318c81612b3f565b811461319757600080fd5b50565b6131a381612b4b565b81146131ae57600080fd5b50565b6131ba81612b97565b81146131c557600080fd5b5056fea2646970667358221220522844c101649290adb39cff4ec1020489fc687ac104d9516a0386079301077764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ef3f632116100c3578063c1fc2d271161007c578063c1fc2d2714610360578063c87b56dd1461037c578063d082e381146103ac578063e985e9c5146103ca578063ed57d4ab146103fa578063efd0cbf9146104185761014d565b80636ef3f632146102b457806370a08231146102be57806395d89b41146102ee578063a22cb4651461030c578063b88d4fde14610328578063bf092a07146103445761014d565b806323b872dd1161011557806323b872dd1461020a57806342842e0e1461022657806345f7e06e14610242578063558a67891461024c57806355f804b3146102685780636352211e146102845761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d05780631fa93aa7146101ec575b600080fd5b61016c600480360381019061016791906122ff565b610434565b6040516101799190612744565b60405180910390f35b61018a610516565b604051610197919061275f565b60405180910390f35b6101ba60048036038101906101b591906123a2565b6105a8565b6040516101c791906126dd565b60405180910390f35b6101ea60048036038101906101e59190612276565b6105ee565b005b6101f4610706565b6040516102019190612744565b60405180910390f35b610224600480360381019061021f9190612160565b61071d565b005b610240600480360381019061023b9190612160565b61077d565b005b61024a61079d565b005b610266600480360381019061026191906122b6565b610814565b005b610282600480360381019061027d9190612359565b610908565b005b61029e600480360381019061029991906123a2565b61097c565b6040516102ab91906126dd565b60405180910390f35b6102bc610a2e565b005b6102d860048036038101906102d391906120f3565b610aa5565b6040516102e59190612961565b60405180910390f35b6102f6610b5d565b604051610303919061275f565b60405180910390f35b61032660048036038101906103219190612236565b610bef565b005b610342600480360381019061033d91906121b3565b610c05565b005b61035e600480360381019061035991906123a2565b610c67565b005b61037a600480360381019061037591906123a2565b610e7c565b005b610396600480360381019061039191906123a2565b610ee0565b6040516103a3919061275f565b60405180910390f35b6103b4610f85565b6040516103c19190612961565b60405180910390f35b6103e460048036038101906103df9190612120565b610f8b565b6040516103f19190612744565b60405180910390f35b61040261101f565b60405161040f9190612744565b60405180910390f35b610432600480360381019061042d91906123a2565b611036565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ff57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050f575061050e826111b8565b5b9050919050565b60606000805461052590612be3565b80601f016020809104026020016040519081016040528092919081815260200182805461055190612be3565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b60006105b382611222565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f98261097c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610661906128e1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661068961126d565b73ffffffffffffffffffffffffffffffffffffffff1614806106b857506106b7816106b261126d565b610f8b565b5b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90612881565b60405180910390fd5b6107018383611275565b505050565b6000600760019054906101000a900460ff16905090565b61072e61072861126d565b8261132e565b61076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490612941565b60405180910390fd5b6107788383836113c3565b505050565b61079883838360405180602001604052806000815250610c05565b505050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f757600080fd5b6001600760016101000a81548160ff021916908315150217905550565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086e57600080fd5b6000805b82518110156109035782818151811061088e5761088d612d4d565b5b602002602001015191506001600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806108fb90612c46565b915050610872565b505050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461096257600080fd5b8060089080519060200190610978929190611e69565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c906128c1565b60405180910390fd5b80915050919050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a8857600080fd5b6001600760006101000a81548160ff021916908315150217905550565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0d90612861565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610b6c90612be3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9890612be3565b8015610be55780601f10610bba57610100808354040283529160200191610be5565b820191906000526020600020905b815481529060010190602001808311610bc857829003601f168201915b5050505050905090565b610c01610bfa61126d565b838361162a565b5050565b610c16610c1061126d565b8361132e565b610c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4c90612941565b60405180910390fd5b610c6184848484611797565b50505050565b60011515600760009054906101000a900460ff16151514610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb490612901565b60405180910390fd5b60011515600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4790612921565b60405180910390fd5b60095481600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d9e9190612a72565b1115610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd690612781565b60405180910390fd5b60005b81811015610e7857610df6336006546117f3565b60066000815480929190610e0990612c46565b91905055506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e5e9190612a72565b925050819055508080610e7090612c46565b915050610de2565b5050565b600760029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed657600080fd5b8060098190555050565b6060610eeb82611222565b6000610ef5611811565b905060006040518060400160405280600581526020017f2e6a736f6e00000000000000000000000000000000000000000000000000000081525090506000825111610f4f5760405180602001604052806000815250610f7c565b81610f59856118a3565b82604051602001610f6c939291906126ac565b6040516020818303038152906040525b92505050919050565b60065481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600760009054906101000a900460ff16905090565b60011515600760019054906101000a900460ff1615151461108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390612841565b60405180910390fd5b60095481600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110da9190612a72565b111561111b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111290612781565b60405180910390fd5b60005b818110156111b457611132336006546117f3565b6006600081548092919061114590612c46565b91905055506001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461119a9190612a72565b9250508190555080806111ac90612c46565b91505061111e565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61122b81611a04565b61126a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611261906128c1565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166112e88361097c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061133a8361097c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061137c575061137b8185610f8b565b5b806113ba57508373ffffffffffffffffffffffffffffffffffffffff166113a2846105a8565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113e38261097c565b73ffffffffffffffffffffffffffffffffffffffff1614611439576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611430906127c1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a090612801565b60405180910390fd5b6114b4838383611a70565b6114bf600082611275565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461150f9190612af9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115669190612a72565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611625838383611a75565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169090612821565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161178a9190612744565b60405180910390a3505050565b6117a28484846113c3565b6117ae84848484611a7a565b6117ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e4906127a1565b60405180910390fd5b50505050565b61180d828260405180602001604052806000815250611c11565b5050565b60606008805461182090612be3565b80601f016020809104026020016040519081016040528092919081815260200182805461184c90612be3565b80156118995780601f1061186e57610100808354040283529160200191611899565b820191906000526020600020905b81548152906001019060200180831161187c57829003601f168201915b5050505050905090565b606060008214156118eb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119ff565b600082905060005b6000821461191d57808061190690612c46565b915050600a826119169190612ac8565b91506118f3565b60008167ffffffffffffffff81111561193957611938612d7c565b5b6040519080825280601f01601f19166020018201604052801561196b5781602001600182028036833780820191505090505b5090505b600085146119f8576001826119849190612af9565b9150600a856119939190612c8f565b603061199f9190612a72565b60f81b8183815181106119b5576119b4612d4d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119f19190612ac8565b945061196f565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000611a9b8473ffffffffffffffffffffffffffffffffffffffff16611c6c565b15611c04578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611ac461126d565b8786866040518563ffffffff1660e01b8152600401611ae694939291906126f8565b602060405180830381600087803b158015611b0057600080fd5b505af1925050508015611b3157506040513d601f19601f82011682018060405250810190611b2e919061232c565b60015b611bb4573d8060008114611b61576040519150601f19603f3d011682016040523d82523d6000602084013e611b66565b606091505b50600081511415611bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba3906127a1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c09565b600190505b949350505050565b611c1b8383611c8f565b611c286000848484611a7a565b611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e906127a1565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf6906128a1565b60405180910390fd5b611d0881611a04565b15611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f906127e1565b60405180910390fd5b611d5460008383611a70565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611da49190612a72565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e6560008383611a75565b5050565b828054611e7590612be3565b90600052602060002090601f016020900481019282611e975760008555611ede565b82601f10611eb057805160ff1916838001178555611ede565b82800160010185558215611ede579182015b82811115611edd578251825591602001919060010190611ec2565b5b509050611eeb9190611eef565b5090565b5b80821115611f08576000816000905550600101611ef0565b5090565b6000611f1f611f1a846129a1565b61297c565b90508083825260208201905082856020860282011115611f4257611f41612db0565b5b60005b85811015611f725781611f588882612000565b845260208401935060208301925050600181019050611f45565b5050509392505050565b6000611f8f611f8a846129cd565b61297c565b905082815260208101848484011115611fab57611faa612db5565b5b611fb6848285612ba1565b509392505050565b6000611fd1611fcc846129fe565b61297c565b905082815260208101848484011115611fed57611fec612db5565b5b611ff8848285612ba1565b509392505050565b60008135905061200f8161316c565b92915050565b600082601f83011261202a57612029612dab565b5b813561203a848260208601611f0c565b91505092915050565b60008135905061205281613183565b92915050565b6000813590506120678161319a565b92915050565b60008151905061207c8161319a565b92915050565b600082601f83011261209757612096612dab565b5b81356120a7848260208601611f7c565b91505092915050565b600082601f8301126120c5576120c4612dab565b5b81356120d5848260208601611fbe565b91505092915050565b6000813590506120ed816131b1565b92915050565b60006020828403121561210957612108612dbf565b5b600061211784828501612000565b91505092915050565b6000806040838503121561213757612136612dbf565b5b600061214585828601612000565b925050602061215685828601612000565b9150509250929050565b60008060006060848603121561217957612178612dbf565b5b600061218786828701612000565b935050602061219886828701612000565b92505060406121a9868287016120de565b9150509250925092565b600080600080608085870312156121cd576121cc612dbf565b5b60006121db87828801612000565b94505060206121ec87828801612000565b93505060406121fd878288016120de565b925050606085013567ffffffffffffffff81111561221e5761221d612dba565b5b61222a87828801612082565b91505092959194509250565b6000806040838503121561224d5761224c612dbf565b5b600061225b85828601612000565b925050602061226c85828601612043565b9150509250929050565b6000806040838503121561228d5761228c612dbf565b5b600061229b85828601612000565b92505060206122ac858286016120de565b9150509250929050565b6000602082840312156122cc576122cb612dbf565b5b600082013567ffffffffffffffff8111156122ea576122e9612dba565b5b6122f684828501612015565b91505092915050565b60006020828403121561231557612314612dbf565b5b600061232384828501612058565b91505092915050565b60006020828403121561234257612341612dbf565b5b60006123508482850161206d565b91505092915050565b60006020828403121561236f5761236e612dbf565b5b600082013567ffffffffffffffff81111561238d5761238c612dba565b5b612399848285016120b0565b91505092915050565b6000602082840312156123b8576123b7612dbf565b5b60006123c6848285016120de565b91505092915050565b6123d881612b2d565b82525050565b6123e781612b3f565b82525050565b60006123f882612a2f565b6124028185612a45565b9350612412818560208601612bb0565b61241b81612dc4565b840191505092915050565b600061243182612a3a565b61243b8185612a56565b935061244b818560208601612bb0565b61245481612dc4565b840191505092915050565b600061246a82612a3a565b6124748185612a67565b9350612484818560208601612bb0565b80840191505092915050565b600061249d602383612a56565b91506124a882612dd5565b604082019050919050565b60006124c0603283612a56565b91506124cb82612e24565b604082019050919050565b60006124e3602583612a56565b91506124ee82612e73565b604082019050919050565b6000612506601c83612a56565b915061251182612ec2565b602082019050919050565b6000612529602483612a56565b915061253482612eeb565b604082019050919050565b600061254c601983612a56565b915061255782612f3a565b602082019050919050565b600061256f601883612a56565b915061257a82612f63565b602082019050919050565b6000612592602983612a56565b915061259d82612f8c565b604082019050919050565b60006125b5603e83612a56565b91506125c082612fdb565b604082019050919050565b60006125d8602083612a56565b91506125e38261302a565b602082019050919050565b60006125fb601883612a56565b915061260682613053565b602082019050919050565b600061261e602183612a56565b91506126298261307c565b604082019050919050565b6000612641600b83612a56565b915061264c826130cb565b602082019050919050565b6000612664601683612a56565b915061266f826130f4565b602082019050919050565b6000612687602e83612a56565b91506126928261311d565b604082019050919050565b6126a681612b97565b82525050565b60006126b8828661245f565b91506126c4828561245f565b91506126d0828461245f565b9150819050949350505050565b60006020820190506126f260008301846123cf565b92915050565b600060808201905061270d60008301876123cf565b61271a60208301866123cf565b612727604083018561269d565b818103606083015261273981846123ed565b905095945050505050565b600060208201905061275960008301846123de565b92915050565b600060208201905081810360008301526127798184612426565b905092915050565b6000602082019050818103600083015261279a81612490565b9050919050565b600060208201905081810360008301526127ba816124b3565b9050919050565b600060208201905081810360008301526127da816124d6565b9050919050565b600060208201905081810360008301526127fa816124f9565b9050919050565b6000602082019050818103600083015261281a8161251c565b9050919050565b6000602082019050818103600083015261283a8161253f565b9050919050565b6000602082019050818103600083015261285a81612562565b9050919050565b6000602082019050818103600083015261287a81612585565b9050919050565b6000602082019050818103600083015261289a816125a8565b9050919050565b600060208201905081810360008301526128ba816125cb565b9050919050565b600060208201905081810360008301526128da816125ee565b9050919050565b600060208201905081810360008301526128fa81612611565b9050919050565b6000602082019050818103600083015261291a81612634565b9050919050565b6000602082019050818103600083015261293a81612657565b9050919050565b6000602082019050818103600083015261295a8161267a565b9050919050565b6000602082019050612976600083018461269d565b92915050565b6000612986612997565b90506129928282612c15565b919050565b6000604051905090565b600067ffffffffffffffff8211156129bc576129bb612d7c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156129e8576129e7612d7c565b5b6129f182612dc4565b9050602081019050919050565b600067ffffffffffffffff821115612a1957612a18612d7c565b5b612a2282612dc4565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612a7d82612b97565b9150612a8883612b97565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612abd57612abc612cc0565b5b828201905092915050565b6000612ad382612b97565b9150612ade83612b97565b925082612aee57612aed612cef565b5b828204905092915050565b6000612b0482612b97565b9150612b0f83612b97565b925082821015612b2257612b21612cc0565b5b828203905092915050565b6000612b3882612b77565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612bce578082015181840152602081019050612bb3565b83811115612bdd576000848401525b50505050565b60006002820490506001821680612bfb57607f821691505b60208210811415612c0f57612c0e612d1e565b5b50919050565b612c1e82612dc4565b810181811067ffffffffffffffff82111715612c3d57612c3c612d7c565b5b80604052505050565b6000612c5182612b97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c8457612c83612cc0565b5b600182019050919050565b6000612c9a82612b97565b9150612ca583612b97565b925082612cb557612cb4612cef565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f596f752068617665206d696e746564206d61782070657220796f75206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5075626c6963206d696e7420646964206e6f74206f70656e0000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f6469646e6f74206f70656e000000000000000000000000000000000000000000600082015250565b7f596f7520617265206e6f7420696e20776c206c69737400000000000000000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61317581612b2d565b811461318057600080fd5b50565b61318c81612b3f565b811461319757600080fd5b50565b6131a381612b4b565b81146131ae57600080fd5b50565b6131ba81612b97565b81146131c557600080fd5b5056fea2646970667358221220522844c101649290adb39cff4ec1020489fc687ac104d9516a0386079301077764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1618,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1621,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "mintWlOpen",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1624,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "mintPublicOpen",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1626,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "owner",
        "offset": 2,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1628,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1630,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "maxPerWlAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1634,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1638,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "inWlAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1642,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "inWlAddressesMinted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1646,
        "contract": "contracts/Artwork.sol:Artwork",
        "label": "AddressesMinted",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}